<?php

/**
 * @file
 * Module file for the Twig Shim project.
 */

use \Drupal\twigshim\TwigshimTwigExtension;

/**
 * Implements hook_menu().
 */
function twigshim_menu() {
  $items['admin/config/development/twigshim'] = array(
    'title'            => 'Twigshim',
    'description'      => 'Define the path to your Twig templates.',
    'page callback'    => 'drupal_get_form',
    'page arguments'   => array('twigshim_settings_form'),
    'access arguments' => array('administer themes'),
    'file'             => 'twigshim.admin.inc',
  );
  return $items;
}

/**
 * Renders a twig template with given variables.
 *
 * Note that it is the caller's responsibility to properly sanitize all
 * variables. See http://bit.ly/2fxkUGS for options.
 *
 * @param string $template
 *   Path to the twig template.
 * @param array $variables
 *   A associative array of field value pairs.
 *
 * @return string
 *   The rendered twig template output.
 */
function twigshim_render($template, array $variables = array()) {

  // Load the Twig instance.
  static $twig;
  if (!isset($twig)) {

    // If Twig has not been imported via Composer Manager or some other method,
    // check to see if composer install has been been run inside this module
    // directory. If that fails, fall back to the Libraries API.
    if (!class_exists('Twig_Environment')) {
      $module_path = drupal_get_path('module', 'twigshim');
      if (file_exists($autoload = "$module_path/vendor/autoload.php")) {
        require_once $autoload;
      }
      // Try the Libraries API (optional depedency).
      elseif (function_exists('libraries_get_path') && $twig_path = libraries_get_path('twig')) {
        require_once "$twig_path/lib/Twig/Autoloader.php";
        Twig_Autoloader::register();
      }
      // No Twig library was found.
      else {
        $message = t('Please install Twig! See the <a href="@url">Twigshim Documentation</a> for more information.', array(
          '@url' => 'https://github.com/kalamuna/twigshim',
        ));
        watchdog('twigshim', $message, NULL, WATCHDOG_ERROR);
        drupal_set_message($message, 'error');
        return $message;
      }
    }

    // Get the path to the Twig templates.
    $templates = variable_get('twigshim_templates', FALSE);
    if (empty($templates)) {
      $theme_path = drupal_get_path('theme', variable_get('theme_default'));
      $templates  = "$theme_path/templates";
    }

    // Create the Twig loader and give other modules a chance to modify it
    // (e.g., to add their own paths).
    $loader = new Twig_Loader_Filesystem(array(
      DRUPAL_ROOT,
      DRUPAL_ROOT . "/$templates",
    ));
    module_invoke_all('twigshim_loader', $loader);

    // Let the themes play too, because twigging is a very themey thing.
    $function = $GLOBALS['theme'] . '_twigshim_loader';
    if (function_exists($function)) {
      $function($loader);
    }

    // Define the Twig Environment options.
    $options['autoescape'] = FALSE;
    $options['debug']      = variable_get('twigshim_debug', FALSE);
    $options['cache']      = variable_get('twigshim_cache', FALSE)
      ? variable_get('file_public_path', conf_path() . '/files') . '/twig'
      : FALSE;

    // Create the Twig Environment.
    $twig = new Twig_Environment($loader, $options);

    // Enable debugging?
    if (variable_get('twigshim_debug', FALSE)) {
      $twig->addExtension(new Twig_Extension_Debug());
    }
    // Let contributed modules extend it.
    module_invoke_all('twigshim_environment', $twig);
  }

  // Render the appropriate twig template with the provided variables.
  return $twig->render($template, $variables);
}

/**
 * Renders an entity via Twig.
 *
 * Note that it is the caller's responsibility to properly sanitize all
 * variables. See http://bit.ly/2fxkUGS for options.
 *
 * @param string $type
 *   The entity type.
 * @param object $entity
 *   The Entity object.
 * @param string $template
 *   Path to the twig template.
 * @param array $variables
 *   An associative array of field value pairs.
 * @param string $mask
 *   The field name prefix to strip off the front.
 *
 * @return string
 *   The rendered twig template output.
 */
function twigshim_render_entity($type, $entity, $template, array $variables = array(), $mask = 'field_') {

  // Get a wrapper for the entity.
  $wrapper = entity_metadata_wrapper($type, $entity);

  // Save field data into template variables.
  foreach (array_keys($wrapper->getPropertyInfo()) as $property) {

    // Strip "field_" from field names.
    $name = strpos($property, $mask) === 0
      ? substr($property, strlen($mask))
      : $property;

    // Don't overwrite any data provided by the caller.
    if (!isset($variables[$name])) {
      $variables[$name] = $wrapper->$property->value();
    }
  }

  return twigshim_render($template, $variables);
}

/**
 * Implements hook_twigshim_environment().
 */
function twigshim_twigshim_environment($twig) {
  // Add the TwigshimTwigExtension to the Twig environment.
  // TODO: Switch to Composer autoloading?
  include __DIR__ . '/src/TwigshimTwigExtension.php';
  $twig->addExtension(new TwigshimTwigExtension());
}
